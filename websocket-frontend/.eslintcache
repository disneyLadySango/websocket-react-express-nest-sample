[{"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/App.tsx":"1","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/reportWebVitals.ts":"2","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/Header/index.tsx":"3","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/Header/Header.tsx":"4","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/index.tsx":"5","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/utils/logger.ts":"6","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/SimpleSocketPage/SimpleSocketPage.tsx":"7","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/SimpleSocketPage/hooks.ts":"8","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/TopPage/TopPage.tsx":"9","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/CreateModal/CreateModalPresenter.tsx":"10","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/hooks/useWebSocket.ts":"11","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/RoomListPage.tsx":"12","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/hooks.ts":"13","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/RoomListPagePresenter.tsx":"14","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/TopPage/TopPagePresenter.tsx":"15","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/CreateModal/CreateModal.tsx":"16"},{"size":489,"mtime":1611838625306,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1611833169756,"results":"19","hashOfConfig":"18"},{"size":34,"mtime":1611836000426,"results":"20","hashOfConfig":"18"},{"size":289,"mtime":1611837754284,"results":"21","hashOfConfig":"18"},{"size":501,"mtime":1612619418823,"results":"22","hashOfConfig":"18"},{"size":630,"mtime":1612630221024,"results":"23","hashOfConfig":"18"},{"size":826,"mtime":1612625341871,"results":"24","hashOfConfig":"18"},{"size":4023,"mtime":1612619660518,"results":"25","hashOfConfig":"18"},{"size":528,"mtime":1612619328574,"results":"26","hashOfConfig":"18"},{"size":2236,"mtime":1612629161194,"results":"27","hashOfConfig":"18"},{"size":2400,"mtime":1612627712884,"results":"28","hashOfConfig":"18"},{"size":1586,"mtime":1612627525456,"results":"29","hashOfConfig":"18"},{"size":2493,"mtime":1612630258436,"results":"30","hashOfConfig":"18"},{"size":2408,"mtime":1612630162494,"results":"31","hashOfConfig":"18"},{"size":498,"mtime":1612619327401,"results":"32","hashOfConfig":"18"},{"size":1127,"mtime":1612630272513,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"176hfn2",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"45"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"45"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/App.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/reportWebVitals.ts",[],["70","71"],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/Header/index.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/Header/Header.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/index.tsx",[],["72","73"],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/utils/logger.ts",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/SimpleSocketPage/SimpleSocketPage.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/SimpleSocketPage/hooks.ts",["74"],"import { useState, useRef, useEffect } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nimport useWebSocket from 'src/hooks/useWebSocket';\nimport Logger from 'src/utils/logger';\n\ntype ApiResponse = {\n  message: string;\n};\n\nexport const useSimpleFetchAndWebScoket = () => {\n  const logger = useRef<Logger>(new Logger('useSimpleFetchAndWebScoket'));\n  // 表示のState\n  // 入力した文字列\n  const [inputValue, setInputValue] = useState<string>('');\n  // APIリクエストのレスポンス\n  const [apiMessage, setApiMessage] = useState<string>('');\n  // ソケット側で通知がきた回数\n  const [socketCount, setSocketCount] = useState<number>(0);\n  // ソケット側で通知がきたメッセージ\n  const [scoketMessage, setSocketMessage] = useState<string>('');\n  // コネクションID\n  const [connectionId, setConnectionId] = useState<string>('');\n\n  // WebScoketのクライアントオブジェクト\n  const onConnect = () => {\n    const id = socket.current?.id || '';\n    setConnectionId(id);\n  };\n  const onConnectError = () => {\n    const id = socket.current?.id || '';\n    setConnectionId(id);\n  };\n  const onDisconnect = () => {\n    setSocketCount(0);\n    setSocketMessage('');\n    // 切れた場合はundefinedが設定される\n    const id = socket.current?.id || '';\n    setConnectionId(id);\n  };\n\n  const { socket, errorCount, status } = useWebSocket(\n    'ws://localhost:9000/simple',\n    {\n      onConnect,\n      onConnectError,\n      onDisconnect,\n    }\n  );\n  // コールバック登録\n  useEffect(() => {\n    logger.current.debug('[useEffect]');\n    // 通知を受信する\n    socket.current?.on('message', (message: string) => {\n      logger.current.debug(`[websocket message]`, message);\n      setSocketCount((prevCount) => prevCount + 1);\n      setSocketMessage(message);\n      const id = socket.current?.id || '';\n      setConnectionId(id);\n    });\n    socket.current?.on('send', (message: string) => {\n      logger.current.debug(`[websocket send]`, message);\n      setSocketCount((prevCount) => prevCount + 1);\n      setSocketMessage(message);\n      const id = socket.current?.id || '';\n      setConnectionId(id);\n    });\n  }, []);\n\n  // action\n  // inputの入力を受け取る\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    logger.current.debug('[onChange]', event);\n    setInputValue(event.target.value);\n  };\n  // APIリクエスト\n  const onClickFetch = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    logger.current.debug('[onClickFetch]', event);\n    const response: AxiosResponse<ApiResponse> = await axios.get(\n      `http://localhost:9000/simple`,\n      {\n        params: {\n          message: inputValue,\n        },\n      }\n    );\n    logger.current.debug('[onClickFetch]-response', response);\n    setApiMessage(response.data?.message);\n    socket.current?.disconnected && socket.current?.connect();\n  };\n  // コネクション切断\n  const onClickConnection = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    logger.current.debug('[onClickConnection]', event);\n\n    if (socket.current?.connected) {\n      logger.current.debug('[onClickConnection]-disconnect');\n      socket.current?.disconnect();\n    } else {\n      logger.current.debug('[onClickConnection]-connect');\n      socket.current?.connect();\n    }\n  };\n  // WebSocketを使ってメッセージをサーバに送る\n  const onClickSender = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    logger.current.debug('[onClickSender]', event);\n    if (socket.current?.disconnected) {\n      socket.current?.connect();\n    }\n    socket.current?.emit('send', inputValue);\n  };\n\n  const states = {\n    inputValue,\n    apiMessage,\n    socketCount,\n    scoketMessage,\n    status,\n    connectionId,\n    errorCount,\n  };\n  const actions = {\n    onChange,\n    onClickFetch,\n    onClickConnection,\n    onClickSender,\n  };\n  return [states, actions] as const;\n};\n","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/TopPage/TopPage.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/CreateModal/CreateModalPresenter.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/hooks/useWebSocket.ts",["75"],"import { useEffect, useRef, useState } from 'react';\nimport { io, Socket } from 'socket.io-client';\n\nimport Logger from 'src/utils/logger';\n\nimport * as Types from './types';\n\nconst SOCKET_STATUS = {\n  noConnect: 'no_connect',\n  connect: 'connect',\n  connectError: 'connect_error',\n  disconnect: 'disconnect',\n} as const;\ntype SocketStatus = typeof SOCKET_STATUS[keyof typeof SOCKET_STATUS];\n\nconst DEFAULT_RECONNECT_COUNT = 3;\nconst DEFAULT_RECONNECT_INTERVAL = 3000;\n\nconst useWebSocket = (\n  connectUrl: string,\n  socketEvent?: Types.WebSocketEvent,\n  reConnectCount: number = DEFAULT_RECONNECT_COUNT,\n  reConnectInterval: number = DEFAULT_RECONNECT_INTERVAL\n) => {\n  // WebSocketのクライアントオブジェクト\n  const socket = useRef<Socket>();\n  const logger = useRef<Logger>(new Logger('useWebSocket'));\n\n  const [errorCount, setErrorCount] = useState<number>(0);\n  const [status, setStatus] = useState<SocketStatus>(SOCKET_STATUS.noConnect);\n\n  useEffect(() => {\n    logger.current.debug('useEffect');\n    socket.current = io(connectUrl);\n    // イベントハンドラ\n    socket.current.on(SOCKET_STATUS.connect, (payload: any) => {\n      logger.current.debug(`[${SOCKET_STATUS.connect}]`, payload);\n      setErrorCount(0);\n      setStatus(SOCKET_STATUS.connect);\n      socketEvent?.onConnect && socketEvent.onConnect(payload);\n    });\n    socket.current.on(SOCKET_STATUS.connectError, (error: Error) => {\n      logger.current.error(`[${SOCKET_STATUS.connectError}]`, error);\n      setStatus(SOCKET_STATUS.connectError);\n      socketEvent?.onConnectError && socketEvent.onConnectError(error);\n      setErrorCount((prevCount) => {\n        if (prevCount > reConnectCount) {\n          // 接続が一定回数を超えた場合 -> 一度切断後再接続\n          socket.current?.disconnect();\n          setTimeout(() => socket.current?.connect(), reConnectInterval);\n          return 0;\n        }\n        return prevCount + 1;\n      });\n    });\n    socket.current.on(SOCKET_STATUS.disconnect, (reason: any) => {\n      logger.current.debug(`[${SOCKET_STATUS.disconnect}]`, reason);\n      setErrorCount(0);\n      setStatus(SOCKET_STATUS.disconnect);\n      socketEvent?.onDisconnect && socketEvent.onDisconnect(reason);\n    });\n    return () => {\n      socket.current?.disconnect();\n    };\n  }, []);\n\n  return { socket, status, errorCount } as const;\n};\n\nexport default useWebSocket;\n","/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/RoomListPage.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/hooks.ts",["76","77","78"],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/RoomListPage/RoomListPagePresenter.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/container/TopPage/TopPagePresenter.tsx",[],"/Users/wayamayu/mySample/websocket-nest-react-sample/websocket-frontend/src/compontns/CreateModal/CreateModal.tsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"79","replacedBy":"83"},{"ruleId":"81","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":68,"column":6,"nodeType":"87","endLine":68,"endColumn":8,"suggestions":"88"},{"ruleId":"85","severity":1,"message":"89","line":65,"column":6,"nodeType":"87","endLine":65,"endColumn":8,"suggestions":"90"},{"ruleId":"85","severity":1,"message":"91","line":35,"column":5,"nodeType":"87","endLine":35,"endColumn":11,"suggestions":"92"},{"ruleId":"85","severity":1,"message":"93","line":44,"column":5,"nodeType":"87","endLine":44,"endColumn":18,"suggestions":"94"},{"ruleId":"85","severity":1,"message":"95","line":77,"column":5,"nodeType":"87","endLine":77,"endColumn":32,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],["97"],["98"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'socket'. Either include it or remove the dependency array.","ArrayExpression",["99"],"React Hook useEffect has missing dependencies: 'connectUrl', 'reConnectCount', 'reConnectInterval', and 'socketEvent'. Either include them or remove the dependency array. If 'setErrorCount' needs the current value of 'reConnectCount', you can also switch to useReducer instead of useState and read 'reConnectCount' in the reducer.",["100"],"React Hook useCallback has an unnecessary dependency: 'name'. Either exclude it or remove the dependency array.",["101"],"React Hook useCallback has an unnecessary dependency: 'description'. Either exclude it or remove the dependency array.",["102"],"React Hook useCallback has a missing dependency: 'onClose'. Either include it or remove the dependency array.",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"108","fix":"110"},{"desc":"111","fix":"112"},"Update the dependencies array to be: [socket]",{"range":"113","text":"114"},"Update the dependencies array to be: [connectUrl, reConnectCount, reConnectInterval, socketEvent]",{"range":"115","text":"116"},"Update the dependencies array to be: []",{"range":"117","text":"118"},{"range":"119","text":"118"},"Update the dependencies array to be: [name, description, onClose]",{"range":"120","text":"121"},[2000,2002],"[socket]",[2227,2229],"[connectUrl, reConnectCount, reConnectInterval, socketEvent]",[1142,1148],"[]",[1401,1414],[2234,2261],"[name, description, onClose]"]